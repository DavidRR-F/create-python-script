name: Python package

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.10
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install

      - name: Format with Black
        run: |
          poetry run black --check .

      - name: Lint with Flake8
        run: |
          poetry run flake8 .

      - name: Test with pytest
        run: |
          poetry run pytest

      - name: Run tests with coverage
        run: |
          poetry run pytest --cov=pyplater

      - name: Check coverage percentage
        id: coverage
        run: |
          COVERAGE_PERCENTAGE=$(poetry run coverage report --fail-under=80 | awk '/TOTAL/ {print substr($4, 1, length($4)-1)}')
          echo "COVERAGE_PERCENTAGE=${COVERAGE_PERCENTAGE}" >> $GITHUB_ENV

      - name: Check coverage result
        run: |
          if [[ "${{ env.COVERAGE_PERCENTAGE }}" < 80 ]]; then
            echo "Test coverage is below 80%. Failing the build."
            exit 1
          fi

      - name: Upload coverage report
        uses: actions/upload-artifact@v2
        with:
          name: coverage-report
          path: ./htmlcov

      - name: Check previous version
        id: previous_version
        run: |
          PREVIOUS_VERSION=$(git show -s --format=%B | awk '/^Version:/ {print substr($2, 1, length($2)-1)}')
          echo "PREVIOUS_VERSION=${PREVIOUS_VERSION}" >> $GITHUB_ENV

      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(poetry version | awk '{print $2}')
          echo "CURRENT_VERSION=${CURRENT_VERSION}" >> $GITHUB_ENV

      - name: Check version difference
        run: |
          if [[ "${{ env.PREVIOUS_VERSION }}" == "${{ env.CURRENT_VERSION }}" ]]; then
            echo "The current version is the same as the previous version. Failing the build."
            exit 1
          else
            echo "Package version: ${{ env.CURRENT_VERSION }}"
          fi
